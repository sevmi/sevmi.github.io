{"version":3,"sources":["webpack:///./node_modules/parse/lib/browser/ParseUser.js","webpack:///./node_modules/parse/lib/browser/ParseSchema.js","webpack:///./node_modules/parse/lib/browser/ParsePolygon.js","webpack:///./node_modules/parse/lib/browser/ParseRelation.js","webpack:///./node_modules/parse/lib/browser/ParseOp.js","webpack:///./node_modules/parse/lib/browser/Push.js","webpack:///./node_modules/parse/lib/browser/ParseQuery.js","webpack:///./node_modules/parse/lib/browser/ParseRole.js","webpack:///./node_modules/parse/lib/browser/ParseSession.js"],"names":["_interopRequireDefault","_Object$defineProperty2","exports","value","default","_stringify","_defineProperty","_promise","_typeof2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_AnonymousUtils","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_Storage","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","attributes","_this","this","call","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","authType","_this2","saveOpts","arguments","length","undefined","sessionToken","getSessionToken","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","result","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","logIn","_this4","_len","args","Array","_key4","prototype","apply","updateUserOnDisk","_this5","_len2","_key5","removeUserFromDisk","_this6","_len3","_key6","_this7","_len4","_key7","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","isAllowed","_upgradeToRevocableSession","currentAsync","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","promise","equals","isLinked","destroy","_cleanupAuthData","_synchronizeAllAuthData","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","toString","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","isAnonymous","currentSession","_logOutWithAll","SESSION_MISSING","session","setUserController","_default","_Object$defineProperty","_indexOf","_defineProperty2","FIELD_TYPES","ParseSchema","_fields","_indexes","assertClassName","getSchemaController","params","fields","indexes","classLevelPermissions","_clp","create","update","delete","purge","clp","name","type","concat","fieldOptions","required","defaultValue","index","addField","__type","iso","Date","targetClass","toPointer","__op","results","send","method","setSchemaController","_isArray","_ParseGeoPoint","ParsePolygon","arg1","_coordinates","_validate","coordinates","other","isEqual","i","point","minX","maxX","minY","maxY","p","Math","min","max","outside","latitude","longitude","inside","_i","j","startX","startY","endX","endY","intersect","coords","TypeError","points","coord","geoPoint","push","_ParseOp","_ParseQuery","ParseRelation","parent","targetClassName","objects","change","RelationOp","_targetClassName","query","_extraOptions","redirectClassNameForKey","_addCondition","opFromJSON","RemoveOp","AddUniqueOp","AddOp","IncrementOp","UnsetOp","SetOp","Op","_map","_splice","_forEach","_assertThisInitialized2","_concat","_arrayContainsObject","_decode","_encode","_ParseRelation","_unique","amount","toAdd","toRemove","_toAdd","_toRemove","ops","_Op","_value","_Op2","_Op3","_amount","previous","applyTo","_Op4","_Op5","_context","valueCopy","v","_Op6","removed","_context2","uniques","_Op7","adds","removes","relationsToAdd","_extractId","relationsToRemove","obj","object","_context3","_localId","relation","_context4","_context5","_context6","_context7","_context8","_context9","newAdd","r","newRemove","newRelation","_context10","_context11","idToPointer","pointers","data","where","push_time","expiration_time","expiration_interval","getPushController","setPushController","_reduce2","_find","_regenerator","_sort","_includes","_keys","_filter2","_asyncToGenerator2","_map2","_slice","_keys2","_promiseUtils","_OfflineQuery","_LocalDatastoreUtils","quote","s","replace","_getClassNameFromQueries","queries","q","handleSelectResult","select","serverDataMask","field","hasSubObjectSelect","pathComponents","split","_obj","serverMask","component","arr","serverData","getServerData","copyMissingDataWithMask","src","dest","mask","copyThisLevel","handleOfflineSort","a","b","sorts","order","operator","isDescending","substring","test","INVALID_KEY_NAME","field1","field2","remainingSorts","ParseQuery","objectClass","_obj2","_where","_include","_exclude","_count","_limit","_skip","_readPreference","_includeReadPreference","_subqueryReadPreference","_queriesLocalDatastore","_localDatastorePinName","_xhrRequest","task","onchange","queryJSON","$or","$and","$nor","condition","string","_handleOfflineQuery2","mark","_callee","localDatastore","keys","alwaysSelectedKeys","count","limit","wrap","prev","next","validateQuery","getLocalDatastore","_serializeObjectsFromPinName","sent","matchesQuery","_toFullJSON","skip","abrupt","stop","include","join","excludeKeys","_select","_order","readPreference","includeReadPreference","subqueryReadPreference","equalTo","firstOptions","first","errorObject","OBJECT_NOT_FOUND","findOptions","_setRequestTask","getQueryController","_handleOfflineQuery","override","distinctOptions","distinct","aggregate","pipeline","aggregateOptions","callback","batchSize","_attr","val","conditionMap","cond","ascending","finished","continueWhile","callbacksDone","greaterThan","_callee2","array","each","_reduce","_callee3","initialValue","_filter","_callee4","flag","doesNotExist","values","regexObject","_regexStartWith","containsAll","regex","modifiers","ignoreCase","multiline","queryKey","fullOptions","option","$term","$language","$caseSensitive","$diacriticSensitive","$search","distance","sorted","near","withinRadians","southwest","northeast","addAscending","addDescending","_this8","_key8","_context12","_context13","k","n","includeCount","_this9","_len5","_key9","_context14","_this10","_len6","_key10","_context15","_this11","_len7","_key11","_context16","_subscribe","_callee5","liveQueryClient","subscription","_context17","getLiveQueryController","getDefaultLiveQueryClient","shouldOpen","open","subscribe","subscribePromise","fromPinWithName","DEFAULT_PIN","checkIfEnabled","_this12","abort","_aborted","cancel","_this13","requestTask","withJSON","_len8","_key12","_orQuery","_len9","_key13","_andQuery","_len10","_key14","_norQuery","find","setQueryController","_ParseACL","ParseRole","acl","setName","setACL","isInvalid","getName","newName","_ParseUser","ParseSession","getSessionController","sessionOptions","getSession","sessionData","setSessionController"],"mappings":"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","file":"js/chunk-vendors~84537199.ecfb5819.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n * @alias Parse.User\n * @extends Parse.Object\n */\n\nvar ParseUser =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  /**\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseUser).call(this, '_User'));\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Parse User');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n    * @param {Object} options\n   * @return {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {String|AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {Object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {Object} saveOpts useMasterKey / sessionToken\n     * @return {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authType] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n      */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for\n     * unlinking)\n      */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {String|AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {Object} options MasterKey / SessionToken\n     * @return {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n      */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n      */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n      */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n      * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n      * @param {String} username\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n      * @param {String} password\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n      * @param {String} email\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n      * @return {String} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n      * @return (Boolean) whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} attrs Extra fields to set on the new user, or null.\n     * @param {Object} options\n     * @return {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} options\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class\n      * @param {Object} protoProps A set of properties to add to the prototype\n     * @param {Object} classProps A set of static properties to add to the class\n     * @static\n     * @return {Class} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: {[prop: string]: any}*/\n    , classProps\n    /*: {[prop: string]: any}*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n      * @static\n     * @return {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n      * @static\n     * @return {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to sign up with.\n     * @param {String} password The password to sign up with.\n     * @param {Object} attrs Extra fields to set on the new user.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to log in with.\n     * @param {String} password The password to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} sessionToken The sessionToken to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {String} sessionToken The sessionToken to get user with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {Object} userJSON The JSON map of the User's data\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @static\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} email The email address associated with the user that\n     *     forgot their password.\n     * @param {Object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n      * @param {Boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n      * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var currentUser = this.currentUser();\n\n    var promise = _promise.default.resolve();\n\n    if (currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser)) {\n      promise = currentUser.destroy({\n        sessionToken: currentUser.getSessionToken()\n      });\n    }\n\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return promise.then(function () {\n      return DefaultController.updateUserOnDisk(user);\n    });\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty name.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request('GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar FIELD_TYPES = ['String', 'Number', 'Boolean', 'Date', 'File', 'GeoPoint', 'Polygon', 'Array', 'Object', 'Pointer', 'Relation'];\n/*:: type FieldOptions = {\n  required: boolean;\n  defaultValue: mixed;\n};*/\n\n/**\n * A Parse.Schema object is for handling schema data from Parse.\n * <p>All the schemas methods require MasterKey.\n *\n * When adding fields, you may set required and default values. (Requires Parse Server 3.7.0+)\n *\n * <pre>\n * const options = { required: true, defaultValue: 'hello world' };\n * const schema = new Parse.Schema('MyClass');\n * schema.addString('field', options);\n * schema.addIndex('index_name', { 'field': 1 });\n * schema.save();\n * </pre>\n * </p>\n * @alias Parse.Schema\n */\n\nvar ParseSchema =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {String} className Parse Class string.\n   */\n  function ParseSchema(className\n  /*: string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseSchema);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_fields\", void 0);\n    (0, _defineProperty2.default)(this, \"_indexes\", void 0);\n    (0, _defineProperty2.default)(this, \"_clp\", void 0);\n\n    if (typeof className === 'string') {\n      if (className === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = className;\n      }\n    }\n\n    this._fields = {};\n    this._indexes = {};\n  }\n  /**\n   * Static method to get all schemas\n   *\n   * @return {Promise} A promise that is resolved with the result when\n   * the query completes.\n   */\n\n\n  (0, _createClass2.default)(ParseSchema, [{\n    key: \"get\",\n\n    /**\n     * Get the Schema from Parse\n     *\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get(this.className).then(function (response) {\n        if (!response) {\n          throw new Error('Schema not found.');\n        }\n\n        return response;\n      });\n    }\n    /**\n     * Create a new Schema on Parse\n     *\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      return controller.create(this.className, params);\n    }\n    /**\n     * Update a Schema on Parse\n     *\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"update\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      this._fields = {};\n      this._indexes = {};\n      return controller.update(this.className, params);\n    }\n    /**\n     * Removing a Schema from Parse\n     * Can only be used on Schema without objects\n     *\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.delete(this.className);\n    }\n    /**\n     * Removes all objects from a Schema (class) in Parse.\n     * EXERCISE CAUTION, running this will delete all objects for this schema and cannot be reversed\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"purge\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.purge(this.className);\n    }\n    /**\n     * Assert if ClassName has been filled\n     * @private\n     */\n\n  }, {\n    key: \"assertClassName\",\n    value: function () {\n      if (!this.className) {\n        throw new Error('You must set a Class Name before making any request.');\n      }\n    }\n    /**\n     * Sets Class Level Permissions when creating / updating a Schema.\n     * EXERCISE CAUTION, running this may override CLP for this schema and cannot be reversed\n     *\n     * @param {Object} clp Class Level Permissions\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"setCLP\",\n    value: function (clp\n    /*: { [key: string]: mixed }*/\n    ) {\n      this._clp = clp;\n      return this;\n    }\n    /**\n     * Adding a Field to Create / Update a Schema\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {String} type Can be a (String|Number|Boolean|Date|Parse.File|Parse.GeoPoint|Array|Object|Pointer|Parse.Relation)\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>required: If field is not set, save operation fails (Requires Parse Server 3.7.0+)\n     *   <li>defaultValue: If field is not set, a default value is selected (Requires Parse Server 3.7.0+)\n     * </ul>\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addField\",\n    value: function (name\n    /*: string*/\n    , type\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      type = type || 'String';\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {\n        throw new Error(\"\".concat(type, \" is not a valid type.\"));\n      }\n\n      var fieldOptions = {\n        type: type\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding an Index to Create / Update a Schema\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {String} type Can be a (String|Number|Boolean|Date|Parse.File|Parse.GeoPoint|Array|Object|Pointer|Parse.Relation)\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addIndex\",\n    value: function (name\n    /*: string*/\n    , index\n    /*: any*/\n    ) {\n      if (!name) {\n        throw new Error('index name may not be null.');\n      }\n\n      if (!index) {\n        throw new Error('index may not be null.');\n      }\n\n      this._indexes[name] = index;\n      return this;\n    }\n    /**\n     * Adding String Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addString\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'String', options);\n    }\n    /**\n     * Adding Number Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addNumber\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Number', options);\n    }\n    /**\n     * Adding Boolean Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addBoolean\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Boolean', options);\n    }\n    /**\n     * Adding Date Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDate\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      if (options && options.defaultValue) {\n        options.defaultValue = {\n          __type: 'Date',\n          iso: new Date(options.defaultValue)\n        };\n      }\n\n      return this.addField(name, 'Date', options);\n    }\n    /**\n     * Adding File Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addFile\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'File', options);\n    }\n    /**\n     * Adding GeoPoint Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addGeoPoint\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'GeoPoint', options);\n    }\n    /**\n     * Adding Polygon Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPolygon\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Polygon', options);\n    }\n    /**\n     * Adding Array Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addArray\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Array', options);\n    }\n    /**\n     * Adding Object Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addObject\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Object', options);\n    }\n    /**\n     * Adding Pointer Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {String} targetClass Name of the target Pointer Class\n     * @param {Object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPointer\",\n    value: function (name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Pointer.');\n      }\n\n      var fieldOptions = {\n        type: 'Pointer',\n        targetClass: targetClass\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n\n        if (options.defaultValue instanceof _ParseObject.default) {\n          fieldOptions.defaultValue = options.defaultValue.toPointer();\n        }\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding Relation Field\n     *\n     * @param {String} name Name of the field that will be created on Parse\n     * @param {String} targetClass Name of the target Pointer Class\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addRelation\",\n    value: function (name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Relation.');\n      }\n\n      this._fields[name] = {\n        type: 'Relation',\n        targetClass: targetClass\n      };\n      return this;\n    }\n    /**\n     * Deleting a Field to Update on a Schema\n     *\n     * @param {String} name Name of the field\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteField\",\n    value: function (name\n    /*: string*/\n    ) {\n      this._fields[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n    /**\n     * Deleting an Index to Update on a Schema\n     *\n     * @param {String} name Name of the field\n     * @return {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteIndex\",\n    value: function (name\n    /*: string*/\n    ) {\n      this._indexes[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n  }], [{\n    key: \"all\",\n    value: function () {\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get('').then(function (response) {\n        if (response.results.length === 0) {\n          throw new Error('Schema not found.');\n        }\n\n        return response.results;\n      });\n    }\n  }]);\n  return ParseSchema;\n}();\n\nvar DefaultController = {\n  send: function (className\n  /*: string*/\n  , method\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var params\n    /*: any*/\n    = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request(method, \"schemas/\".concat(className), params, {\n      useMasterKey: true\n    });\n  },\n  get: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'GET');\n  },\n  create: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'POST', params);\n  },\n  update: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'PUT', params);\n  },\n  delete: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'DELETE');\n  },\n  purge: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('DELETE', \"purge/\".concat(className), {}, {\n      useMasterKey: true\n    });\n  }\n};\n\n_CoreManager.default.setSchemaController(DefaultController);\n\nvar _default = ParseSchema;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new Polygon with any of the following forms:<br>\n *   <pre>\n *   new Polygon([[0,0],[0,1],[1,1],[1,0]])\n *   new Polygon([GeoPoint, GeoPoint, GeoPoint])\n *   </pre>\n *\n * <p>Represents a coordinates that may be associated\n * with a key in a ParseObject or used as a reference point for geo queries.\n * This allows proximity-based queries on the key.</p>\n *\n * <p>Example:<pre>\n *   var polygon = new Parse.Polygon([[0,0],[0,1],[1,1],[1,0]]);\n *   var object = new Parse.Object(\"PlaceObject\");\n *   object.set(\"area\", polygon);\n *   object.save();</pre></p>\n * @alias Parse.Polygon\n */\n\n\nvar ParsePolygon =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {(Number[][]|Parse.GeoPoint[])} coordinates An Array of coordinate pairs\n   */\n  function ParsePolygon(arg1\n  /*: Array<Array<number>> | Array<ParseGeoPoint>*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParsePolygon);\n    (0, _defineProperty2.default)(this, \"_coordinates\", void 0);\n    this._coordinates = ParsePolygon._validate(arg1);\n  }\n  /**\n   * Coordinates value for this Polygon.\n   * Throws an exception if not valid type.\n   * @property coordinates\n   * @type Array\n   */\n\n\n  (0, _createClass2.default)(ParsePolygon, [{\n    key: \"toJSON\",\n\n    /**\n     * Returns a JSON representation of the Polygon, suitable for Parse.\n     * @return {Object}\n     */\n    value: function ()\n    /*: { __type: string; coordinates: Array<Array<number>>;}*/\n    {\n      ParsePolygon._validate(this._coordinates);\n\n      return {\n        __type: 'Polygon',\n        coordinates: this._coordinates\n      };\n    }\n    /**\n     * Checks if two polygons are equal\n     * @param {(Parse.Polygon|Object)} other\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (!(other instanceof ParsePolygon) || this.coordinates.length !== other.coordinates.length) {\n        return false;\n      }\n\n      var isEqual = true;\n\n      for (var i = 1; i < this._coordinates.length; i += 1) {\n        if (this._coordinates[i][0] != other.coordinates[i][0] || this._coordinates[i][1] != other.coordinates[i][1]) {\n          isEqual = false;\n          break;\n        }\n      }\n\n      return isEqual;\n    }\n    /**\n     *\n     * @param {Parse.GeoPoint} point\n     * @returns {Boolean} Returns if the point is contained in the polygon\n     */\n\n  }, {\n    key: \"containsPoint\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: boolean*/\n    {\n      var minX = this._coordinates[0][0];\n      var maxX = this._coordinates[0][0];\n      var minY = this._coordinates[0][1];\n      var maxY = this._coordinates[0][1];\n\n      for (var i = 1; i < this._coordinates.length; i += 1) {\n        var p = this._coordinates[i];\n        minX = Math.min(p[0], minX);\n        maxX = Math.max(p[0], maxX);\n        minY = Math.min(p[1], minY);\n        maxY = Math.max(p[1], maxY);\n      }\n\n      var outside = point.latitude < minX || point.latitude > maxX || point.longitude < minY || point.longitude > maxY;\n\n      if (outside) {\n        return false;\n      }\n\n      var inside = false;\n\n      for (var _i = 0, j = this._coordinates.length - 1; _i < this._coordinates.length; j = _i++) {\n        var startX = this._coordinates[_i][0];\n        var startY = this._coordinates[_i][1];\n        var endX = this._coordinates[j][0];\n        var endY = this._coordinates[j][1];\n        var intersect = startY > point.longitude != endY > point.longitude && point.latitude < (endX - startX) * (point.longitude - startY) / (endY - startY) + startX;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return inside;\n    }\n    /**\n     * Validates that the list of coordinates can form a valid polygon\n     * @param {Array} coords the list of coordinated to validate as a polygon\n     * @throws {TypeError}\n     */\n\n  }, {\n    key: \"coordinates\",\n    get: function ()\n    /*: Array<Array<number>>*/\n    {\n      return this._coordinates;\n    },\n    set: function (coords\n    /*: Array<Array<number>> | Array<ParseGeoPoint>*/\n    ) {\n      this._coordinates = ParsePolygon._validate(coords);\n    }\n  }], [{\n    key: \"_validate\",\n    value: function (coords\n    /*: Array<Array<number>> | Array<ParseGeoPoint>*/\n    )\n    /*: Array<Array<number>>*/\n    {\n      if (!(0, _isArray.default)(coords)) {\n        throw new TypeError('Coordinates must be an Array');\n      }\n\n      if (coords.length < 3) {\n        throw new TypeError('Polygon must have at least 3 GeoPoints or Points');\n      }\n\n      var points = [];\n\n      for (var i = 0; i < coords.length; i += 1) {\n        var coord = coords[i];\n        var geoPoint = void 0;\n\n        if (coord instanceof _ParseGeoPoint.default) {\n          geoPoint = coord;\n        } else if ((0, _isArray.default)(coord) && coord.length === 2) {\n          geoPoint = new _ParseGeoPoint.default(coord[0], coord[1]);\n        } else {\n          throw new TypeError('Coordinates must be an Array of GeoPoints or Points');\n        }\n\n        points.push([geoPoint.latitude, geoPoint.longitude]);\n      }\n\n      return points;\n    }\n  }]);\n  return ParsePolygon;\n}();\n\nvar _default = ParsePolygon;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n * @alias Parse.Relation\n */\n\n\nvar ParseRelation =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {String} key The key for this relation on the parent.\n   */\n  function ParseRelation(parent\n  /*: ?ParseObject*/\n  , key\n  /*: ?string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n\n\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function (parent\n    /*: ParseObject*/\n    , key\n    /*: string*/\n    ) {\n      this.key = this.key || key;\n\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n    /**\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\n      * @param {} objects The item or items to add.\n     */\n\n  }, {\n    key: \"add\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    )\n    /*: ParseObject*/\n    {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n    /**\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\n      * @param {} objects The item or items to remove.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    ) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp([], objects);\n\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to disk.\n      * @return {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __type: 'Relation', className: ?string }*/\n    {\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n    /**\n     * Returns a Parse.Query that is limited to objects in this\n     * relation.\n      * @return {Parse.Query}\n     */\n\n  }, {\n    key: \"query\",\n    value: function query()\n    /*: ParseQuery*/\n    {\n      var query;\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n\n      query._addCondition('$relatedTo', 'key', this.key);\n\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\n\nvar _default = ParseRelation;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.opFromJSON = opFromJSON;\nexports.RelationOp = exports.RemoveOp = exports.AddUniqueOp = exports.AddOp = exports.IncrementOp = exports.UnsetOp = exports.SetOp = exports.Op = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _arrayContainsObject = _interopRequireDefault(require(\"./arrayContainsObject\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nfunction opFromJSON(json\n/*: { [key: string]: any }*/\n)\n/*: ?Op*/\n{\n  if (!json || !json.__op) {\n    return null;\n  }\n\n  switch (json.__op) {\n    case 'Delete':\n      return new UnsetOp();\n\n    case 'Increment':\n      return new IncrementOp(json.amount);\n\n    case 'Add':\n      return new AddOp((0, _decode.default)(json.objects));\n\n    case 'AddUnique':\n      return new AddUniqueOp((0, _decode.default)(json.objects));\n\n    case 'Remove':\n      return new RemoveOp((0, _decode.default)(json.objects));\n\n    case 'AddRelation':\n      {\n        var toAdd = (0, _decode.default)(json.objects);\n\n        if (!(0, _isArray.default)(toAdd)) {\n          return new RelationOp([], []);\n        }\n\n        return new RelationOp(toAdd, []);\n      }\n\n    case 'RemoveRelation':\n      {\n        var toRemove = (0, _decode.default)(json.objects);\n\n        if (!(0, _isArray.default)(toRemove)) {\n          return new RelationOp([], []);\n        }\n\n        return new RelationOp([], toRemove);\n      }\n\n    case 'Batch':\n      {\n        var _toAdd = [];\n        var _toRemove = [];\n\n        for (var i = 0; i < json.ops.length; i++) {\n          if (json.ops[i].__op === 'AddRelation') {\n            _toAdd = (0, _concat.default)(_toAdd).call(_toAdd, (0, _decode.default)(json.ops[i].objects));\n          } else if (json.ops[i].__op === 'RemoveRelation') {\n            _toRemove = (0, _concat.default)(_toRemove).call(_toRemove, (0, _decode.default)(json.ops[i].objects));\n          }\n        }\n\n        return new RelationOp(_toAdd, _toRemove);\n      }\n  }\n\n  return null;\n}\n\nvar Op =\n/*#__PURE__*/\nfunction () {\n  function Op() {\n    (0, _classCallCheck2.default)(this, Op);\n  }\n\n  (0, _createClass2.default)(Op, [{\n    key: \"applyTo\",\n    // Empty parent class\n    value: function ()\n    /*: mixed*/\n\n    /*: mixed*/\n    {}\n    /* eslint-disable-line no-unused-vars */\n\n  }, {\n    key: \"mergeWith\",\n    value: function ()\n    /*: Op*/\n\n    /*: ?Op*/\n    {}\n    /* eslint-disable-line no-unused-vars */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: mixed*/\n    {}\n  }]);\n  return Op;\n}();\n\nexports.Op = Op;\n\nvar SetOp =\n/*#__PURE__*/\nfunction (_Op) {\n  (0, _inherits2.default)(SetOp, _Op);\n\n  function SetOp(value\n  /*: mixed*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SetOp);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SetOp).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"_value\", void 0);\n    _this._value = value;\n    return _this;\n  }\n\n  (0, _createClass2.default)(SetOp, [{\n    key: \"applyTo\",\n    value: function ()\n    /*: mixed*/\n    {\n      return this._value;\n    }\n  }, {\n    key: \"mergeWith\",\n    value: function ()\n    /*: SetOp*/\n    {\n      return new SetOp(this._value);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function () {\n      return (0, _encode.default)(this._value, false, true);\n    }\n  }]);\n  return SetOp;\n}(Op);\n\nexports.SetOp = SetOp;\n\nvar UnsetOp =\n/*#__PURE__*/\nfunction (_Op2) {\n  (0, _inherits2.default)(UnsetOp, _Op2);\n\n  function UnsetOp() {\n    (0, _classCallCheck2.default)(this, UnsetOp);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UnsetOp).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(UnsetOp, [{\n    key: \"applyTo\",\n    value: function () {\n      return undefined;\n    }\n  }, {\n    key: \"mergeWith\",\n    value: function ()\n    /*: UnsetOp*/\n    {\n      return new UnsetOp();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __op: string }*/\n    {\n      return {\n        __op: 'Delete'\n      };\n    }\n  }]);\n  return UnsetOp;\n}(Op);\n\nexports.UnsetOp = UnsetOp;\n\nvar IncrementOp =\n/*#__PURE__*/\nfunction (_Op3) {\n  (0, _inherits2.default)(IncrementOp, _Op3);\n\n  function IncrementOp(amount\n  /*: number*/\n  ) {\n    var _this2;\n\n    (0, _classCallCheck2.default)(this, IncrementOp);\n    _this2 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IncrementOp).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), \"_amount\", void 0);\n\n    if (typeof amount !== 'number') {\n      throw new TypeError('Increment Op must be initialized with a numeric amount.');\n    }\n\n    _this2._amount = amount;\n    return _this2;\n  }\n\n  (0, _createClass2.default)(IncrementOp, [{\n    key: \"applyTo\",\n    value: function (value\n    /*: ?mixed*/\n    )\n    /*: number*/\n    {\n      if (typeof value === 'undefined') {\n        return this._amount;\n      }\n\n      if (typeof value !== 'number') {\n        throw new TypeError('Cannot increment a non-numeric value.');\n      }\n\n      return this._amount + value;\n    }\n  }, {\n    key: \"mergeWith\",\n    value: function (previous\n    /*: Op*/\n    )\n    /*: Op*/\n    {\n      if (!previous) {\n        return this;\n      }\n\n      if (previous instanceof SetOp) {\n        return new SetOp(this.applyTo(previous._value));\n      }\n\n      if (previous instanceof UnsetOp) {\n        return new SetOp(this._amount);\n      }\n\n      if (previous instanceof IncrementOp) {\n        return new IncrementOp(this.applyTo(previous._amount));\n      }\n\n      throw new Error('Cannot merge Increment Op with the previous Op');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __op: string; amount: number }*/\n    {\n      return {\n        __op: 'Increment',\n        amount: this._amount\n      };\n    }\n  }]);\n  return IncrementOp;\n}(Op);\n\nexports.IncrementOp = IncrementOp;\n\nvar AddOp =\n/*#__PURE__*/\nfunction (_Op4) {\n  (0, _inherits2.default)(AddOp, _Op4);\n\n  function AddOp(value\n  /*: mixed | Array<mixed>*/\n  ) {\n    var _this3;\n\n    (0, _classCallCheck2.default)(this, AddOp);\n    _this3 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AddOp).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), \"_value\", void 0);\n    _this3._value = (0, _isArray.default)(value) ? value : [value];\n    return _this3;\n  }\n\n  (0, _createClass2.default)(AddOp, [{\n    key: \"applyTo\",\n    value: function (value\n    /*: mixed*/\n    )\n    /*: Array<mixed>*/\n    {\n      if (value == null) {\n        return this._value;\n      }\n\n      if ((0, _isArray.default)(value)) {\n        return (0, _concat.default)(value).call(value, this._value);\n      }\n\n      throw new Error('Cannot add elements to a non-array value');\n    }\n  }, {\n    key: \"mergeWith\",\n    value: function (previous\n    /*: Op*/\n    )\n    /*: Op*/\n    {\n      if (!previous) {\n        return this;\n      }\n\n      if (previous instanceof SetOp) {\n        return new SetOp(this.applyTo(previous._value));\n      }\n\n      if (previous instanceof UnsetOp) {\n        return new SetOp(this._value);\n      }\n\n      if (previous instanceof AddOp) {\n        return new AddOp(this.applyTo(previous._value));\n      }\n\n      throw new Error('Cannot merge Add Op with the previous Op');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __op: string; objects: mixed }*/\n    {\n      return {\n        __op: 'Add',\n        objects: (0, _encode.default)(this._value, false, true)\n      };\n    }\n  }]);\n  return AddOp;\n}(Op);\n\nexports.AddOp = AddOp;\n\nvar AddUniqueOp =\n/*#__PURE__*/\nfunction (_Op5) {\n  (0, _inherits2.default)(AddUniqueOp, _Op5);\n\n  function AddUniqueOp(value\n  /*: mixed | Array<mixed>*/\n  ) {\n    var _this4;\n\n    (0, _classCallCheck2.default)(this, AddUniqueOp);\n    _this4 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AddUniqueOp).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), \"_value\", void 0);\n    _this4._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);\n    return _this4;\n  }\n\n  (0, _createClass2.default)(AddUniqueOp, [{\n    key: \"applyTo\",\n    value: function (value\n    /*: mixed | Array<mixed>*/\n    )\n    /*: Array<mixed>*/\n    {\n      if (value == null) {\n        return this._value || [];\n      }\n\n      if ((0, _isArray.default)(value)) {\n        var _context; // copying value lets Flow guarantee the pointer isn't modified elsewhere\n\n\n        var valueCopy = value;\n        var toAdd = [];\n        (0, _forEach.default)(_context = this._value).call(_context, function (v) {\n          if (v instanceof _ParseObject.default) {\n            if (!(0, _arrayContainsObject.default)(valueCopy, v)) {\n              toAdd.push(v);\n            }\n          } else {\n            if ((0, _indexOf.default)(valueCopy).call(valueCopy, v) < 0) {\n              toAdd.push(v);\n            }\n          }\n        });\n        return (0, _concat.default)(value).call(value, toAdd);\n      }\n\n      throw new Error('Cannot add elements to a non-array value');\n    }\n  }, {\n    key: \"mergeWith\",\n    value: function (previous\n    /*: Op*/\n    )\n    /*: Op*/\n    {\n      if (!previous) {\n        return this;\n      }\n\n      if (previous instanceof SetOp) {\n        return new SetOp(this.applyTo(previous._value));\n      }\n\n      if (previous instanceof UnsetOp) {\n        return new SetOp(this._value);\n      }\n\n      if (previous instanceof AddUniqueOp) {\n        return new AddUniqueOp(this.applyTo(previous._value));\n      }\n\n      throw new Error('Cannot merge AddUnique Op with the previous Op');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __op: string; objects: mixed }*/\n    {\n      return {\n        __op: 'AddUnique',\n        objects: (0, _encode.default)(this._value, false, true)\n      };\n    }\n  }]);\n  return AddUniqueOp;\n}(Op);\n\nexports.AddUniqueOp = AddUniqueOp;\n\nvar RemoveOp =\n/*#__PURE__*/\nfunction (_Op6) {\n  (0, _inherits2.default)(RemoveOp, _Op6);\n\n  function RemoveOp(value\n  /*: mixed | Array<mixed>*/\n  ) {\n    var _this5;\n\n    (0, _classCallCheck2.default)(this, RemoveOp);\n    _this5 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RemoveOp).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this5), \"_value\", void 0);\n    _this5._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);\n    return _this5;\n  }\n\n  (0, _createClass2.default)(RemoveOp, [{\n    key: \"applyTo\",\n    value: function (value\n    /*: mixed | Array<mixed>*/\n    )\n    /*: Array<mixed>*/\n    {\n      if (value == null) {\n        return [];\n      }\n\n      if ((0, _isArray.default)(value)) {\n        // var i = value.indexOf(this._value);\n        var removed = (0, _concat.default)(value).call(value, []);\n\n        for (var i = 0; i < this._value.length; i++) {\n          var index = (0, _indexOf.default)(removed).call(removed, this._value[i]);\n\n          while (index > -1) {\n            (0, _splice.default)(removed).call(removed, index, 1);\n            index = (0, _indexOf.default)(removed).call(removed, this._value[i]);\n          }\n\n          if (this._value[i] instanceof _ParseObject.default && this._value[i].id) {\n            for (var j = 0; j < removed.length; j++) {\n              if (removed[j] instanceof _ParseObject.default && this._value[i].id === removed[j].id) {\n                (0, _splice.default)(removed).call(removed, j, 1);\n                j--;\n              }\n            }\n          }\n        }\n\n        return removed;\n      }\n\n      throw new Error('Cannot remove elements from a non-array value');\n    }\n  }, {\n    key: \"mergeWith\",\n    value: function (previous\n    /*: Op*/\n    )\n    /*: Op*/\n    {\n      if (!previous) {\n        return this;\n      }\n\n      if (previous instanceof SetOp) {\n        return new SetOp(this.applyTo(previous._value));\n      }\n\n      if (previous instanceof UnsetOp) {\n        return new UnsetOp();\n      }\n\n      if (previous instanceof RemoveOp) {\n        var _context2;\n\n        var uniques = (0, _concat.default)(_context2 = previous._value).call(_context2, []);\n\n        for (var i = 0; i < this._value.length; i++) {\n          if (this._value[i] instanceof _ParseObject.default) {\n            if (!(0, _arrayContainsObject.default)(uniques, this._value[i])) {\n              uniques.push(this._value[i]);\n            }\n          } else {\n            if ((0, _indexOf.default)(uniques).call(uniques, this._value[i]) < 0) {\n              uniques.push(this._value[i]);\n            }\n          }\n        }\n\n        return new RemoveOp(uniques);\n      }\n\n      throw new Error('Cannot merge Remove Op with the previous Op');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __op: string; objects: mixed }*/\n    {\n      return {\n        __op: 'Remove',\n        objects: (0, _encode.default)(this._value, false, true)\n      };\n    }\n  }]);\n  return RemoveOp;\n}(Op);\n\nexports.RemoveOp = RemoveOp;\n\nvar RelationOp =\n/*#__PURE__*/\nfunction (_Op7) {\n  (0, _inherits2.default)(RelationOp, _Op7);\n\n  function RelationOp(adds\n  /*: Array<ParseObject | string>*/\n  , removes\n  /*: Array<ParseObject | string>*/\n  ) {\n    var _this6;\n\n    (0, _classCallCheck2.default)(this, RelationOp);\n    _this6 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RelationOp).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), \"_targetClassName\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), \"relationsToAdd\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), \"relationsToRemove\", void 0);\n    _this6._targetClassName = null;\n\n    if ((0, _isArray.default)(adds)) {\n      _this6.relationsToAdd = (0, _unique.default)((0, _map.default)(adds).call(adds, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));\n    }\n\n    if ((0, _isArray.default)(removes)) {\n      _this6.relationsToRemove = (0, _unique.default)((0, _map.default)(removes).call(removes, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));\n    }\n\n    return _this6;\n  }\n\n  (0, _createClass2.default)(RelationOp, [{\n    key: \"_extractId\",\n    value: function (obj\n    /*: string | ParseObject*/\n    )\n    /*: string*/\n    {\n      if (typeof obj === 'string') {\n        return obj;\n      }\n\n      if (!obj.id) {\n        throw new Error('You cannot add or remove an unsaved Parse Object from a relation');\n      }\n\n      if (!this._targetClassName) {\n        this._targetClassName = obj.className;\n      }\n\n      if (this._targetClassName !== obj.className) {\n        throw new Error('Tried to create a Relation with 2 different object types: ' + this._targetClassName + ' and ' + obj.className + '.');\n      }\n\n      return obj.id;\n    }\n  }, {\n    key: \"applyTo\",\n    value: function (value\n    /*: mixed*/\n    , object\n    /*:: ?: { className: string, id: ?string }*/\n    , key\n    /*:: ?: string*/\n    )\n    /*: ?ParseRelation*/\n    {\n      if (!value) {\n        var _context3;\n\n        if (!object || !key) {\n          throw new Error('Cannot apply a RelationOp without either a previous value, or an object and a key');\n        }\n\n        var parent = new _ParseObject.default(object.className);\n\n        if (object.id && (0, _indexOf.default)(_context3 = object.id).call(_context3, 'local') === 0) {\n          parent._localId = object.id;\n        } else if (object.id) {\n          parent.id = object.id;\n        }\n\n        var relation = new _ParseRelation.default(parent, key);\n        relation.targetClassName = this._targetClassName;\n        return relation;\n      }\n\n      if (value instanceof _ParseRelation.default) {\n        if (this._targetClassName) {\n          if (value.targetClassName) {\n            if (this._targetClassName !== value.targetClassName) {\n              throw new Error('Related object must be a ' + value.targetClassName + ', but a ' + this._targetClassName + ' was passed in.');\n            }\n          } else {\n            value.targetClassName = this._targetClassName;\n          }\n        }\n\n        return value;\n      } else {\n        throw new Error('Relation cannot be applied to a non-relation field');\n      }\n    }\n  }, {\n    key: \"mergeWith\",\n    value: function (previous\n    /*: Op*/\n    )\n    /*: Op*/\n    {\n      if (!previous) {\n        return this;\n      } else if (previous instanceof UnsetOp) {\n        throw new Error('You cannot modify a relation after deleting it.');\n      } else if (previous instanceof SetOp && previous._value instanceof _ParseRelation.default) {\n        return this;\n      } else if (previous instanceof RelationOp) {\n        var _context4, _context5, _context6, _context7, _context8, _context9;\n\n        if (previous._targetClassName && previous._targetClassName !== this._targetClassName) {\n          throw new Error('Related object must be of class ' + previous._targetClassName + ', but ' + (this._targetClassName || 'null') + ' was passed in.');\n        }\n\n        var newAdd = (0, _concat.default)(_context4 = previous.relationsToAdd).call(_context4, []);\n        (0, _forEach.default)(_context5 = this.relationsToRemove).call(_context5, function (r) {\n          var index = (0, _indexOf.default)(newAdd).call(newAdd, r);\n\n          if (index > -1) {\n            (0, _splice.default)(newAdd).call(newAdd, index, 1);\n          }\n        });\n        (0, _forEach.default)(_context6 = this.relationsToAdd).call(_context6, function (r) {\n          var index = (0, _indexOf.default)(newAdd).call(newAdd, r);\n\n          if (index < 0) {\n            newAdd.push(r);\n          }\n        });\n        var newRemove = (0, _concat.default)(_context7 = previous.relationsToRemove).call(_context7, []);\n        (0, _forEach.default)(_context8 = this.relationsToAdd).call(_context8, function (r) {\n          var index = (0, _indexOf.default)(newRemove).call(newRemove, r);\n\n          if (index > -1) {\n            (0, _splice.default)(newRemove).call(newRemove, index, 1);\n          }\n        });\n        (0, _forEach.default)(_context9 = this.relationsToRemove).call(_context9, function (r) {\n          var index = (0, _indexOf.default)(newRemove).call(newRemove, r);\n\n          if (index < 0) {\n            newRemove.push(r);\n          }\n        });\n        var newRelation = new RelationOp(newAdd, newRemove);\n        newRelation._targetClassName = this._targetClassName;\n        return newRelation;\n      }\n\n      throw new Error('Cannot merge Relation Op with the previous Op');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __op?: string; objects?: mixed; ops?: mixed }*/\n    {\n      var _this7 = this;\n\n      var idToPointer = function (id) {\n        return {\n          __type: 'Pointer',\n          className: _this7._targetClassName,\n          objectId: id\n        };\n      };\n\n      var adds = null;\n      var removes = null;\n      var pointers = null;\n\n      if (this.relationsToAdd.length > 0) {\n        var _context10;\n\n        pointers = (0, _map.default)(_context10 = this.relationsToAdd).call(_context10, idToPointer);\n        adds = {\n          __op: 'AddRelation',\n          objects: pointers\n        };\n      }\n\n      if (this.relationsToRemove.length > 0) {\n        var _context11;\n\n        pointers = (0, _map.default)(_context11 = this.relationsToRemove).call(_context11, idToPointer);\n        removes = {\n          __op: 'RemoveRelation',\n          objects: pointers\n        };\n      }\n\n      if (adds && removes) {\n        return {\n          __op: 'Batch',\n          ops: [adds, removes]\n        };\n      }\n\n      return adds || removes || {};\n    }\n  }]);\n  return RelationOp;\n}(Op);\n\nexports.RelationOp = RelationOp;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.send = send;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n  * Sends a push notification.\n  * @method send\n  * @name Parse.Push.send\n  * @param {Object} data -  The data of the push notification.  Valid fields\n  * are:\n  *   <ol>\n  *     <li>channels - An Array of channels to push to.</li>\n  *     <li>push_time - A Date object for when to send the push.</li>\n  *     <li>expiration_time -  A Date object for when to expire\n  *         the push.</li>\n  *     <li>expiration_interval - The seconds from now to expire the push.</li>\n  *     <li>where - A Parse.Query over Parse.Installation that is used to match\n  *         a set of installations to push to.</li>\n  *     <li>data - The data to send as part of the push</li>\n  *   <ol>\n  * @param {Object} options An object that has an optional success function,\n  * that takes no arguments and will be called on a successful push, and\n  * an error function that takes a Parse.Error and will be called if the push\n  * failed.\n  * @return {Promise} A promise that is fulfilled when the push request\n  *     completes.\n  */\n\n\nfunction send(data\n/*: PushData*/\n, options\n/*:: ?: { useMasterKey?: boolean, success?: any, error?: any }*/\n)\n/*: Promise*/\n{\n  options = options || {};\n\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  return _CoreManager.default.getPushController().send(data, {\n    useMasterKey: options.useMasterKey\n  });\n}\n\nvar DefaultController = {\n  send: function (data\n  /*: PushData*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var request = RESTController.request('POST', 'push', data, {\n      useMasterKey: !!options.useMasterKey\n    });\n    return request;\n  }\n};\n\n_CoreManager.default.setPushController(DefaultController);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _reduce2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/reduce\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n * @private\n */\n\n\nfunction quote(s\n/*: string*/\n) {\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, \".\") !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split(\".\");\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj !== undefined) {\n          _obj = _obj[component];\n        } //add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  //copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      //traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n * @alias Parse.Query\n */\n\n\nvar ParseQuery =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @property className\n   * @type String\n   */\n\n  /**\n   * @param {(String|Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false;\n    this._limit = -1; // negative limit is not sent in the server request\n\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   * @param {Array} queries\n   * @return {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     * @param {Array} queries\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     * @param {Array} queries\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return '^' + quote(string);\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys.default)(params)) {\n                  keys = (0, _keys.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  count = results.length; // total count from response\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     * @return {Object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(\",\");\n      }\n\n      if ((0, _keys.default)(json)) {\n        this._select = (0, _keys.default)(json).split(\",\");\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(\",\");\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(\",\");\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = [\"where\", \"include\", \"keys\", \"count\", \"limit\", \"skip\", \"order\", \"readPreference\", \"includeReadPreference\", \"subqueryReadPreference\"]).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n       * Static method to restore Parse.Query by json representation\n       * Internally calling Parse.Query.withJSON\n       * @param {String} className\n       * @param {QueryJSON} json from Parse.Query.toJSON() method\n       * @returns {Parse.Query} new created query\n       */\n\n  }, {\n    key: \"get\",\n\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server.  Either options.success or options.error is called when the\n     * find completes. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {String} objectId The id of the object to be fetched.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    value: function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     * Either options.success or options.error is called when the find\n     * completes.\n     *\n     * @param {Object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5;\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          return _ParseObject.default.fromJSON(data, !select);\n        });\n        var count = response.count;\n\n        if (typeof count === \"number\") {\n          return {\n            results: results,\n            count: count\n          };\n        } else {\n          return results;\n        }\n      });\n    }\n    /**\n     * Counts the number of objects that match this query.\n     * Either options.success or options.error is called when the count\n     * completes.\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {String} key A field to find distinct values\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {Mixed} pipeline Array or Object of stages to process query\n     * @param {Object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      return controller.aggregate(this.className, {\n        pipeline: pipeline\n      }, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Either options.success or options.error is called when it completes.\n     * success is passed the object if there is one. otherwise, undefined.\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        return _ParseObject.default.fromJSON(objects[0], !select);\n      });\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _context6;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className); // We can override the batch size from the options.\n      // This is undocumented, but useful for testing.\n\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context6 = this._include).call(_context6, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context7;\n\n        query._select = (0, _map2.default)(_context7 = this._select).call(_context7, function (s) {\n          return s;\n        });\n      }\n\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      var finished = false;\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, function () {\n        return (0, _find.default)(query).call(query, findOptions).then(function (results) {\n          var callbacksDone = _promise.default.resolve();\n\n          (0, _forEach.default)(results).call(results, function (result) {\n            callbacksDone = callbacksDone.then(function () {\n              return callback(result);\n            });\n          });\n          return callbacksDone.then(function () {\n            if (results.length >= query._limit) {\n              query.greaterThan('objectId', results[results.length - 1].id);\n            } else {\n              finished = true;\n            }\n          });\n        });\n      });\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context8.next = 4;\n                return this.each(function (object) {\n                  array.push(callback(object, index, _this5));\n                  index += 1;\n                }, options);\n\n              case 4:\n                return _context8.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {Mixed} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var objects;\n        return _regenerator.default.wrap(function (_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                objects = [];\n                _context9.next = 3;\n                return this.each(function (object) {\n                  objects.push(object);\n                }, options);\n\n              case 3:\n                return _context9.abrupt(\"return\", (0, _reduce2.default)(objects).call(objects, callback, initialValue));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context10.next = 4;\n                return this.each(function (object) {\n                  var flag = callback(object, index, _this6);\n\n                  if (flag) {\n                    array.push(object);\n                  }\n\n                  index += 1;\n                }, options);\n\n              case 4:\n                return _context10.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions **/\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that must not be equalled.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will not match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     * @param {String} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     * @param {String} key The key to check.  This key's value must be an array.\n     * @param {Array<String>} values The string values that will match as starting string.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          '$regex': _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     * @param {String} key The key that should exist.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     * @param {String} key The key that should not exist\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     * @param {String} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     * @param {String} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     * @param {String} key The key that contains the value that is being\n     *                     matched.\n     * @param {String} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     * @param {String} key The key that contains the value that is being\n     *                     excluded.\n     * @param {String} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} substring The substring that the value must contain.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(value));\n    }\n    /**\n    * Adds a constraint for finding string values that contain a provided\n    * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n    *\n    * In order to sort you must use select and ascending ($score is required)\n    *  <pre>\n    *   query.fullText('field', 'term');\n    *   query.ascending('$score');\n    *   query.select('$score');\n    *  </pre>\n    *\n    * To retrieve the weight / rank\n    *  <pre>\n    *   object->get('score');\n    *  </pre>\n    *\n    * You can define optionals by providing an object as a third parameter\n    *  <pre>\n    *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n    *  </pre>\n    *\n    * @param {String} key The key that the string to match is stored in.\n    * @param {String} value The string to search\n    * @param {Object} options (Optional)\n    * @param {String} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n    * @param {Boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n    * @param {Boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n    * @return {Parse.Query} Returns the query, so you can chain this call.\n    */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} prefix The substring that the value must start with.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', this._regexStartWith(value));\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} suffix The substring that the value must end with.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(value) + '$');\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in radians) of results to\n     *   return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', distance);\n      } else {\n        return this._addCondition(key, '$geoWithin', {\n          '$centerSphere': [[point.longitude, point.latitude], distance]\n        });\n      }\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in miles) of results to\n     *   return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, distance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in kilometers) of results\n     *   to return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, distance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     * @param {String} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        '$box': [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {String} key The key to be constrained.\n     * @param {Array} array of geopoints\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        '$polygon': points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {String} key The key to be constrained.\n     * @param {Parse.GeoPoint} GeoPoint\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        '$point': point\n      });\n    }\n    /** Query Orderings **/\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context11;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this7._order = (0, _concat.default)(_context11 = _this7._order).call(_context11, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context12, _context13;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this8._order = (0, _concat.default)(_context12 = _this8._order).call(_context12, (0, _map2.default)(_context13 = key.replace(/\\s/g, '').split(',')).call(_context13, function (k) {\n          return '-' + k;\n        }));\n      });\n      return this;\n    }\n    /** Query Options **/\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     * @param {Number} n the number of results to skip.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {Number} n the number of results to limit to.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     *`results`: holding {ParseObject} array and `count`: integer holding total number\n     * @param {boolean} b false - disable, true - enable.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...String|Array<String>} key The name(s) of the key(s) to include.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context14;\n\n          _this9._include = (0, _concat.default)(_context14 = _this9._include).call(_context14, key);\n        } else {\n          _this9._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     * @param {...String|Array<String>} keys The name(s) of the key(s) to include.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context15;\n\n          _this10._select = (0, _concat.default)(_context15 = _this10._select).call(_context15, key);\n        } else {\n          _this10._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...String|Array<String>} keys The name(s) of the key(s) to exclude.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context16;\n\n          _this11._exclude = (0, _concat.default)(_context16 = _this11._exclude).call(_context16, key);\n        } else {\n          _this11._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     * @param {String} readPreference The read preference for the main query.\n     * @param {String} includeReadPreference The read preference for the queries to include pointers.\n     * @param {String} subqueryReadPreference The read preference for the sub queries.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {String} sessionToken (optional) Defaults to the currentUser\n     * @return {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee5(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context17.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context17.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context17.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context17.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to OR.\n     * @static\n     * @return {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n\n    /**\n     * Change the source of this query to the server.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {String} name The name of query source.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this12.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this13 = this;\n\n      options.requestTask = function (task) {\n        _this13._xhrRequest.task = task;\n\n        _this13._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to AND.\n     * @static\n     * @return {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to NOR.\n     * @static\n     * @return {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'classes/' + className, params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n * @alias Parse.Role\n * @extends Parse.Object\n */\n\n\nvar ParseRole =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n  /**\n   * @param {String} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n\n  function ParseRole(name\n  /*: string*/\n  , acl\n  /*: ParseACL*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseRole).call(this, '_Role'));\n\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n\n      _this.setACL(acl);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n    * @return {String} the name of the role.\n   */\n\n\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function ()\n    /*: ?string*/\n    {\n      var name = this.get('name');\n\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n\n      return '';\n    }\n    /**\n     * Sets the name for a role. This value must be set before the role has\n     * been saved to the server, and cannot be set once the role has been\n     * saved.\n     *\n     * <p>\n     *   A role's name can only contain alphanumeric characters, _, -, and\n     *   spaces.\n     * </p>\n     *\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\n     *\n      * @param {String} name The name of the role.\n     * @param {Object} options Standard options object with success and error\n     *     callbacks.\n     */\n\n  }, {\n    key: \"setName\",\n    value: function (name\n    /*: string*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('name', name, options);\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Users that are direct\n     * children of this role. These users are granted any privileges that this\n     * role has been granted (e.g. read or write access through ACLs). You can\n     * add or remove users from the role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\n     *\n      * @return {Parse.Relation} the relation for the users belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('users');\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Roles that are direct\n     * children of this role. These roles' users are granted any privileges that\n     * this role has been granted (e.g. read or write access through ACLs). You\n     * can add or remove child roles from this role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\n     *\n      * @return {Parse.Relation} the relation for the roles belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getRoles\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('roles');\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseError | boolean*/\n    {\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n\n      if (isInvalid) {\n        return isInvalid;\n      }\n\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name can only be set before it has been saved.');\n        }\n\n        if (typeof newName !== 'string') {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name must be a String.');\n        }\n\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name can be only contain alphanumeric characters, _, ' + '-, and spaces.');\n        }\n      }\n\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\n\nvar _default = ParseRole;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n * @alias Parse.Session\n * @extends Parse.Object\n */\n\n\nvar ParseSession =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseSession, _ParseObject);\n  /**\n   *\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseSession(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseSession);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseSession).call(this, '_Session'));\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Session');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Returns the session token string.\n    * @return {String}\n   */\n\n\n  (0, _createClass2.default)(ParseSession, [{\n    key: \"getSessionToken\",\n    value: function ()\n    /*: string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n    }\n    /**\n     * Retrieves the Session object for the currently logged in session.\n      * @static\n     * @return {Promise} A promise that is resolved with the Parse.Session\n     *   object after it has been fetched. If there is no current user, the\n     *   promise will be rejected.\n     */\n\n  }, {\n    key: \"current\",\n    value: function (options\n    /*: FullOptions*/\n    ) {\n      options = options || {};\n\n      var controller = _CoreManager.default.getSessionController();\n\n      var sessionOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        sessionOptions.useMasterKey = options.useMasterKey;\n      }\n\n      return _ParseUser.default.currentAsync().then(function (user) {\n        if (!user) {\n          return _promise.default.reject('There is no current user.');\n        }\n\n        sessionOptions.sessionToken = user.getSessionToken();\n        return controller.getSession(sessionOptions);\n      });\n    }\n    /**\n     * Determines whether the current session token is revocable.\n     * This method is useful for migrating Express.js or Node.js web apps to\n     * use revocable sessions. If you are migrating an app that uses the Parse\n     * SDK in the browser only, please use Parse.User.enableRevocableSession()\n     * instead, so that sessions can be automatically upgraded.\n      * @static\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrentSessionRevocable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var currentUser = _ParseUser.default.current();\n\n      if (currentUser) {\n        return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n      }\n\n      return false;\n    }\n  }]);\n  return ParseSession;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Session', ParseSession);\n\nvar DefaultController = {\n  getSession: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseSession>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(function (sessionData) {\n      session._finishFetch(sessionData);\n\n      session._setExisted(true);\n\n      return session;\n    });\n  }\n};\n\n_CoreManager.default.setSessionController(DefaultController);\n\nvar _default = ParseSession;\nexports.default = _default;"],"sourceRoot":""}